{"ast":null,"code":"import React, { Component } from 'react';\nimport BlogForm from '../Components/BlogForm';\nimport { connect } from 'react-redux';\nimport { addPost, editPost } from '../actionCreators'; // class FormContainer extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleCancel = this.handleCancel.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//   handleCancel() {\n//     this.props.history.push('/');\n//   }\n//   //if url is \"/new\", this.props.isEdit will be falsy and addPost is called\n//   //if url is \"/edit\", this.props.isEdit will be true and editPost is called\n//   handleSubmit(post) {\n//     this.props.isEdit ? this.props.editPost(post) : this.props.addPost(post);\n//     this.props.history.push('/');\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <BlogForm\n//           post={this.props.post}\n//           submit={this.handleSubmit}\n//           cancel={this.handleCancel}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// //if url is \"/edit\", ownProps will url parameter with postId --> find that post by ID and pass form values\n// //otherwise, passes undefined values for form\n// function mapStateToProps(reduxState, ownProps) {\n//   let post;\n//   if (ownProps) {\n//     post = reduxState.posts[ownProps.match.params.postid];\n//   }\n//   return {\n//     post\n//   };\n// }\n// const connectToReduxStore = connect(\n//   mapStateToProps,\n//   { addPost, editPost }\n// );\n// export default connectToReduxStore(FormContainer);","map":{"version":3,"sources":["/Users/sherlock/Desktop/react_microblog/microblog/frontend/src/Containers/FormContainer.js"],"names":["React","Component","BlogForm","connect","addPost","editPost"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,mBAAlC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from 'react';\nimport BlogForm from '../Components/BlogForm';\nimport { connect } from 'react-redux';\nimport { addPost, editPost } from '../actionCreators';\n\n// class FormContainer extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleCancel = this.handleCancel.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n\n//   handleCancel() {\n//     this.props.history.push('/');\n//   }\n\n//   //if url is \"/new\", this.props.isEdit will be falsy and addPost is called\n//   //if url is \"/edit\", this.props.isEdit will be true and editPost is called\n//   handleSubmit(post) {\n//     this.props.isEdit ? this.props.editPost(post) : this.props.addPost(post);\n//     this.props.history.push('/');\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <BlogForm\n//           post={this.props.post}\n//           submit={this.handleSubmit}\n//           cancel={this.handleCancel}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// //if url is \"/edit\", ownProps will url parameter with postId --> find that post by ID and pass form values\n// //otherwise, passes undefined values for form\n// function mapStateToProps(reduxState, ownProps) {\n//   let post;\n//   if (ownProps) {\n//     post = reduxState.posts[ownProps.match.params.postid];\n//   }\n//   return {\n//     post\n//   };\n// }\n\n// const connectToReduxStore = connect(\n//   mapStateToProps,\n//   { addPost, editPost }\n// );\n\n// export default connectToReduxStore(FormContainer);\n"]},"metadata":{},"sourceType":"module"}
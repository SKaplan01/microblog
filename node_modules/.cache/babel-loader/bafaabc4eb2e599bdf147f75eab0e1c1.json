{"ast":null,"code":"import _classCallCheck from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/src/Containers/FormContainer.js\";\nimport React, { Component } from 'react';\nimport BlogForm from '../Components/BlogForm';\nimport { connect } from 'react-redux';\nimport { addPost, editPost } from '../actionCreators';\n\nvar FormContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormContainer, _Component);\n\n  function FormContainer(props) {\n    var _this;\n\n    _classCallCheck(this, FormContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormContainer).call(this, props));\n    _this.handleCancel = _this.handleCancel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(FormContainer, [{\n    key: \"handleCancel\",\n    value: function handleCancel() {\n      this.props.history.push('/');\n    } //if url is \"/new\", this.props.isEdit will be falsy and addPost is called\n    //if url is \"/edit\", this.props.isEdit will be true and editPost is called\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(post) {\n      this.props.isEdit ? this.props.editPost(post) : this.props.addPost(post);\n      this.props.history.push('/');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(BlogForm, {\n        post: this.props.post,\n        submit: this.handleSubmit,\n        cancel: this.handleCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FormContainer;\n}(Component); //if url is \"/edit\", ownProps will url parameter with postId --> find that post by ID and pass form values\n//otherwise, passes undefined values for form\n\n\nfunction mapStateToProps(reduxState, ownProps) {\n  var post;\n\n  if (ownProps) {\n    post = reduxState.posts[ownProps.match.params.postid];\n  }\n\n  return {\n    post: post\n  };\n}\n\nvar connectToReduxStore = connect(mapStateToProps, {\n  addPost: addPost,\n  editPost: editPost\n});\nexport default connectToReduxStore(FormContainer);","map":{"version":3,"sources":["/Users/sherlock/Desktop/react_microblog/microblog/frontend/src/Containers/FormContainer.js"],"names":["React","Component","BlogForm","connect","addPost","editPost","FormContainer","props","handleCancel","bind","handleSubmit","history","push","post","isEdit","mapStateToProps","reduxState","ownProps","posts","match","params","postid","connectToReduxStore"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,mBAAlC;;IAEMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,uDAApB;AAHiB;AAIlB;;;;mCAEc;AACb,WAAKF,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,K,CAED;AACA;;;;iCACaC,I,EAAM;AACjB,WAAKN,KAAL,CAAWO,MAAX,GAAoB,KAAKP,KAAL,CAAWF,QAAX,CAAoBQ,IAApB,CAApB,GAAgD,KAAKN,KAAL,CAAWH,OAAX,CAAmBS,IAAnB,CAAhD;AACA,WAAKN,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWM,IADnB;AAEE,QAAA,MAAM,EAAE,KAAKH,YAFf;AAGE,QAAA,MAAM,EAAE,KAAKF,YAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASD;;;;EA5ByBP,S,GA+B5B;AACA;;;AACA,SAASc,eAAT,CAAyBC,UAAzB,EAAqCC,QAArC,EAA+C;AAC7C,MAAIJ,IAAJ;;AACA,MAAII,QAAJ,EAAc;AACZJ,IAAAA,IAAI,GAAGG,UAAU,CAACE,KAAX,CAAiBD,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBC,MAAvC,CAAP;AACD;;AACD,SAAO;AACLR,IAAAA,IAAI,EAAJA;AADK,GAAP;AAGD;;AAED,IAAMS,mBAAmB,GAAGnB,OAAO,CACjCY,eADiC,EAEjC;AAAEX,EAAAA,OAAO,EAAPA,OAAF;AAAWC,EAAAA,QAAQ,EAARA;AAAX,CAFiC,CAAnC;AAKA,eAAeiB,mBAAmB,CAAChB,aAAD,CAAlC","sourcesContent":["import React, { Component } from 'react';\nimport BlogForm from '../Components/BlogForm';\nimport { connect } from 'react-redux';\nimport { addPost, editPost } from '../actionCreators';\n\nclass FormContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleCancel() {\n    this.props.history.push('/');\n  }\n\n  //if url is \"/new\", this.props.isEdit will be falsy and addPost is called\n  //if url is \"/edit\", this.props.isEdit will be true and editPost is called\n  handleSubmit(post) {\n    this.props.isEdit ? this.props.editPost(post) : this.props.addPost(post);\n    this.props.history.push('/');\n  }\n\n  render() {\n    return (\n      <div>\n        <BlogForm\n          post={this.props.post}\n          submit={this.handleSubmit}\n          cancel={this.handleCancel}\n        />\n      </div>\n    );\n  }\n}\n\n//if url is \"/edit\", ownProps will url parameter with postId --> find that post by ID and pass form values\n//otherwise, passes undefined values for form\nfunction mapStateToProps(reduxState, ownProps) {\n  let post;\n  if (ownProps) {\n    post = reduxState.posts[ownProps.match.params.postid];\n  }\n  return {\n    post\n  };\n}\n\nconst connectToReduxStore = connect(\n  mapStateToProps,\n  { addPost, editPost }\n);\n\nexport default connectToReduxStore(FormContainer);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport uuid from 'uuid/v4';\nimport axios from 'axios';\nimport { ADD_COMMENT, DELETE_COMMENT, LOAD_COMMENTS, ADD_POST, EDIT_POST, DELETE_POST, LOAD_TITLES, LOAD_POST, ADD_VOTE } from './actionTypes';\nvar BASE_URL = 'http://localhost:5000/'; //For reference\n\n/**********************************************/\n// export function addPost(post) {\n//   let id = uuid();\n//   post.id = id;\n//   post.comments = {};\n//   return {\n//     type: ADD_POST,\n//     post\n//   };\n// }\n// export function editPost(post) {\n//   return {\n//     type: EDIT_POST,\n//     post\n//   };\n// }\n// export function deletePost(postId) {\n//   return {\n//     type: DELETE_POST,\n//     postId\n//   };\n// }\n// export function addComment(comment, postId) {\n//   return {\n//     type: ADD_COMMENT,\n//     postId,\n//     comment\n//   };\n// }\n// export function deleteComment(postId, commentId) {\n//   return {\n//     type: DELETE_COMMENT,\n//     postId,\n//     commentId\n//   };\n// }\n\n/**********************************************/\n\nfunction gotTitlesFromApi(titles) {\n  return {\n    type: LOAD_TITLES,\n    titles: titles\n  };\n} //Redux thunk function that gets posts from backend API\n\n\nexport function getTitlesFromApi() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios.get(\"\".concat(BASE_URL, \"api/posts\"));\n\n              case 3:\n                resp = _context.sent;\n                dispatch(gotTitlesFromApi(resp.data));\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nfunction gotPostFromApi(post) {\n  return {\n    type: LOAD_POST,\n    post: post\n  };\n} //Redux thunk function that gets a specific post from API\n\n\nexport function getOnePostFromApi(postId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return axios.get(\"\".concat(BASE_URL, \"api/posts/\").concat(postId));\n\n              case 3:\n                resp = _context2.sent;\n                dispatch(gotPostFromApi(resp.data));\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nfunction addedPostToApi(post) {\n  return {\n    type: ADD_POST,\n    post: post\n  };\n} //Redux thunk function that adds a post to backend - gets posts from API once new post added\n//Updates redux state with titles\n\n\nexport function addPostToApi(post) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return axios.post(\"\".concat(BASE_URL, \"api/posts\"), post);\n\n              case 3:\n                resp = _context3.sent;\n                _context3.next = 6;\n                return dispatch(addedPostToApi(resp.data));\n\n              case 6:\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 8]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nfunction editedPost(post) {\n  return {\n    type: EDIT_POST,\n    post: post\n  };\n} //Redux thunk function that edits a post in the backend - gets posts from API once post has been edited\n//Updates redux state with titles\n\n\nexport function editPostApi(post, postId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                console.log(post);\n                console.log(postId);\n                _context4.next = 5;\n                return axios.put(\"\".concat(BASE_URL, \"api/posts/\").concat(postId), post);\n\n              case 5:\n                resp = _context4.sent;\n                _context4.next = 8;\n                return dispatch(editedPost(resp.data));\n\n              case 8:\n                _context4.next = 10;\n                return dispatch(getTitlesFromApi());\n\n              case 10:\n                _context4.next = 15;\n                break;\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(_context4.t0);\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 12]]);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nfunction deletedPostFromStore(postId) {\n  return {\n    type: DELETE_POST,\n    postId: postId\n  };\n} //Redux thunk function that deletes post from API - - gets posts from API once post has been deleted\n//Updates redux state with titles\n\n\nexport function deletePostFromApi(postId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return axios.delete(\"\".concat(BASE_URL, \"api/posts/\").concat(postId));\n\n              case 3:\n                _context5.next = 5;\n                return dispatch(getTitlesFromApi());\n\n              case 5:\n                _context5.next = 10;\n                break;\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                console.log(_context5.t0);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nfunction gotCommentsFromApi(postId) {\n  return {\n    type: LOAD_COMMENTS,\n    postId: postId\n  };\n} //Redux thunk function that gets all comments from API\n\n\nexport function getCommentsFromApi(postId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return axios.get(\"\".concat(BASE_URL, \"api/posts/\").concat(postId, \"/comments\"));\n\n              case 3:\n                _context6.next = 5;\n                return dispatch(gotCommentsFromApi(postId));\n\n              case 5:\n                _context6.next = 10;\n                break;\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                console.log(_context6.t0);\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function addedComment(comment, postId) {\n  return {\n    type: ADD_COMMENT,\n    postId: postId,\n    comment: comment\n  };\n} //Redux thunk function that gets adds a comment to API\n//Dispatch getCommentsFromApi to load comments after comment is added and update redux state\n\nexport function addCommentApi(comment, postId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(dispatch) {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return axios.post(\"\".concat(BASE_URL, \"api/posts/\").concat(postId, \"/comments\"), comment);\n\n              case 3:\n                resp = _context7.sent;\n                _context7.next = 6;\n                return dispatch(addedComment(resp.data, postId));\n\n              case 6:\n                _context7.next = 11;\n                break;\n\n              case 8:\n                _context7.prev = 8;\n                _context7.t0 = _context7[\"catch\"](0);\n                console.log(_context7.t0);\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 8]]);\n      }));\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function deletedComment(postId, commentId) {\n  return {\n    type: DELETE_COMMENT,\n    postId: postId,\n    commentId: commentId\n  };\n} //Redux thunk function that gets deletes a comment from API\n//Dispatch getCommentsFromApi to load comments after is comment is deleted and update redux state\n\nexport function deleteCommentApi(postId, commentId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref8 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return axios.delete(\"\".concat(BASE_URL, \"api/posts/\").concat(postId, \"/comments/\").concat(commentId));\n\n              case 3:\n                _context8.next = 5;\n                return dispatch(deletedComment(postId, commentId));\n\n              case 5:\n                _context8.next = 10;\n                break;\n\n              case 7:\n                _context8.prev = 7;\n                _context8.t0 = _context8[\"catch\"](0);\n                console.log(_context8.t0);\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 7]]);\n      }));\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }()\n  );\n} //Action creator for adding a vote\n\nexport function addVote(postId, direction) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref9 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(dispatch) {\n        var votes;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return axios.post(\"\".concat(BASE_URL, \"/api/posts/\").concat(postId, \"/vote/\").concat(direction));\n\n              case 3:\n                votes = _context9.sent;\n                dispatch(addedVote(postId, votes));\n                _context9.next = 10;\n                break;\n\n              case 7:\n                _context9.prev = 7;\n                _context9.t0 = _context9[\"catch\"](0);\n                console.log(_context9.t0);\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 7]]);\n      }));\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }()\n  );\n} //Action creator for added a vote\n\nfunction addedVote(postId, votes) {\n  return {\n    type: ADD_VOTE,\n    postId: postId,\n    votes: votes\n  };\n}","map":{"version":3,"sources":["/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/src/actionCreators.js"],"names":["uuid","axios","ADD_COMMENT","DELETE_COMMENT","LOAD_COMMENTS","ADD_POST","EDIT_POST","DELETE_POST","LOAD_TITLES","LOAD_POST","ADD_VOTE","BASE_URL","gotTitlesFromApi","titles","type","getTitlesFromApi","dispatch","get","resp","data","console","log","gotPostFromApi","post","getOnePostFromApi","postId","addedPostToApi","addPostToApi","editedPost","editPostApi","put","deletedPostFromStore","deletePostFromApi","delete","gotCommentsFromApi","getCommentsFromApi","addedComment","comment","addCommentApi","deletedComment","commentId","deleteCommentApi","addVote","direction","votes","addedVote"],"mappings":"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","sourcesContent":["import uuid from 'uuid/v4';\nimport axios from 'axios';\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  LOAD_COMMENTS,\n  ADD_POST,\n  EDIT_POST,\n  DELETE_POST,\n  LOAD_TITLES,\n  LOAD_POST,\n  ADD_VOTE\n} from './actionTypes';\n\nconst BASE_URL = 'http://localhost:5000/';\n\n//For reference\n/**********************************************/\n// export function addPost(post) {\n//   let id = uuid();\n//   post.id = id;\n//   post.comments = {};\n//   return {\n//     type: ADD_POST,\n//     post\n//   };\n// }\n\n// export function editPost(post) {\n//   return {\n//     type: EDIT_POST,\n//     post\n//   };\n// }\n\n// export function deletePost(postId) {\n//   return {\n//     type: DELETE_POST,\n//     postId\n//   };\n// }\n\n// export function addComment(comment, postId) {\n//   return {\n//     type: ADD_COMMENT,\n//     postId,\n//     comment\n//   };\n// }\n\n// export function deleteComment(postId, commentId) {\n//   return {\n//     type: DELETE_COMMENT,\n//     postId,\n//     commentId\n//   };\n// }\n/**********************************************/\n\nfunction gotTitlesFromApi(titles) {\n  return { type: LOAD_TITLES, titles };\n}\n\n//Redux thunk function that gets posts from backend API\nexport function getTitlesFromApi() {\n  return async function(dispatch) {\n    try {\n      let resp = await axios.get(`${BASE_URL}api/posts`);\n      dispatch(gotTitlesFromApi(resp.data));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nfunction gotPostFromApi(post) {\n  return { type: LOAD_POST, post };\n}\n\n//Redux thunk function that gets a specific post from API\nexport function getOnePostFromApi(postId) {\n  return async function(dispatch) {\n    try {\n      let resp = await axios.get(`${BASE_URL}api/posts/${postId}`);\n      dispatch(gotPostFromApi(resp.data));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nfunction addedPostToApi(post) {\n  return { type: ADD_POST, post };\n}\n\n//Redux thunk function that adds a post to backend - gets posts from API once new post added\n//Updates redux state with titles\nexport function addPostToApi(post) {\n  return async function(dispatch) {\n    try {\n      let resp = await axios.post(`${BASE_URL}api/posts`, post);\n      await dispatch(addedPostToApi(resp.data));\n      // await dispatch(getTitlesFromApi());\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nfunction editedPost(post) {\n  return { type: EDIT_POST, post };\n}\n\n//Redux thunk function that edits a post in the backend - gets posts from API once post has been edited\n//Updates redux state with titles\nexport function editPostApi(post, postId) {\n  return async function(dispatch) {\n    try {\n      console.log(post);\n      console.log(postId);\n      let resp = await axios.put(`${BASE_URL}api/posts/${postId}`, post);\n      await dispatch(editedPost(resp.data));\n      await dispatch(getTitlesFromApi());\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nfunction deletedPostFromStore(postId) {\n  return { type: DELETE_POST, postId };\n}\n\n//Redux thunk function that deletes post from API - - gets posts from API once post has been deleted\n//Updates redux state with titles\nexport function deletePostFromApi(postId) {\n  return async function(dispatch) {\n    try {\n      await axios.delete(`${BASE_URL}api/posts/${postId}`);\n      //Is this line of code needed?\n      // await dispatch(deletedPostFromStore(postId));\n      await dispatch(getTitlesFromApi());\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nfunction gotCommentsFromApi(postId) {\n  return { type: LOAD_COMMENTS, postId };\n}\n\n//Redux thunk function that gets all comments from API\nexport function getCommentsFromApi(postId) {\n  return async function(dispatch) {\n    try {\n      await axios.get(`${BASE_URL}api/posts/${postId}/comments`);\n      await dispatch(gotCommentsFromApi(postId));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nexport function addedComment(comment, postId) {\n  return {\n    type: ADD_COMMENT,\n    postId,\n    comment\n  };\n}\n\n//Redux thunk function that gets adds a comment to API\n//Dispatch getCommentsFromApi to load comments after comment is added and update redux state\nexport function addCommentApi(comment, postId) {\n  return async function(dispatch) {\n    try {\n      let resp = await axios.post(\n        `${BASE_URL}api/posts/${postId}/comments`,\n        comment\n      );\n      await dispatch(addedComment(resp.data, postId));\n      // await dispatch(getCommentsFromApi(postId));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nexport function deletedComment(postId, commentId) {\n  return {\n    type: DELETE_COMMENT,\n    postId,\n    commentId\n  };\n}\n\n//Redux thunk function that gets deletes a comment from API\n//Dispatch getCommentsFromApi to load comments after is comment is deleted and update redux state\nexport function deleteCommentApi(postId, commentId) {\n  return async function(dispatch) {\n    try {\n      await axios.delete(\n        `${BASE_URL}api/posts/${postId}/comments/${commentId}`\n      );\n      await dispatch(deletedComment(postId, commentId));\n      // await dispatch(getCommentsFromApi(postId));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\n//Action creator for adding a vote\nexport function addVote(postId, direction) {\n  return async function(dispatch) {\n    try {\n      let votes = await axios.post(\n        `${BASE_URL}/api/posts/${postId}/vote/${direction}`\n      );\n      dispatch(addedVote(postId, votes));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\n//Action creator for added a vote\nfunction addedVote(postId, votes) {\n  return {\n    type: ADD_VOTE,\n    postId,\n    votes\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
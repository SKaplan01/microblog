{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/src/Containers/PostList.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Card, CardTitle, CardGroup, CardSubtitle, CardBody } from 'reactstrap';\nimport { getTitlesFromApi, addVote } from '../actionCreators';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons';\nimport Loader from 'react-loader-spinner'; //Render a list of cards which contain post data, link to specific posts.\n\nvar PostList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostList, _Component);\n\n  function PostList(props) {\n    var _this;\n\n    _classCallCheck(this, PostList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostList).call(this, props));\n    _this.vote = _this.vote.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      loading: true\n    };\n    return _this;\n  } //loads title, description and votes from API\n  //(component will then get new props from mapStateToProps)\n\n\n  _createClass(PostList, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.props.getTitlesFromApi();\n\n              case 2:\n                this.setState({\n                  loading: false\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"vote\",\n    value: function vote(id, direction) {\n      this.props.addVote(id, direction);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var upVoteStyle = {\n        margin: '5px',\n        color: 'green',\n        cursor: 'pointer'\n      };\n      var downVoteStyle = {\n        margin: '5px',\n        color: 'red',\n        cursor: 'pointer'\n      };\n      var cardGroup = {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        flexWrap: 'wrap',\n        padding: '5px',\n        marginLeft: '-10px',\n        marginTop: '10px'\n      };\n      var postCard = {\n        maxWidth: '250px',\n        minWidth: '250px',\n        maxHeight: '400px',\n        margin: '10px',\n        border: '1px solid',\n        borderColor: '#7FDBFF'\n      };\n      var cardBody = {\n        margin: '5px'\n      };\n\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          className: \"title-list-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(Loader, {\n          type: \"Triangle\",\n          color: \"#7FDBFF\",\n          height: \"100\",\n          width: \"100\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }));\n      }\n\n      var postCards;\n\n      if (this.props.posts) {\n        var posts = this.props.posts;\n        postCards = posts.map(function (post) {\n          return React.createElement(Card, {\n            key: post.id,\n            style: postCard,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            style: cardBody,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/\".concat(post.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, ' ', React.createElement(CardTitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, post.title)), React.createElement(CardSubtitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }, post.description), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }), React.createElement(CardSubtitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, \"Votes: \", post.votes), React.createElement(FontAwesomeIcon, {\n            style: upVoteStyle,\n            onClick: function onClick() {\n              return _this2.vote(post.id, 'up');\n            },\n            icon: faThumbsUp,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }), React.createElement(FontAwesomeIcon, {\n            style: downVoteStyle,\n            onClick: function onClick() {\n              return _this2.vote(post.id, 'down');\n            },\n            icon: faThumbsDown,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          })));\n        });\n      }\n\n      return React.createElement(CardGroup, {\n        style: cardGroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, postCards);\n    }\n  }]);\n\n  return PostList;\n}(Component);\n\nfunction mapStateToProps(reduxState) {\n  return {\n    posts: reduxState.titles\n  };\n}\n\nvar connectToReduxStore = connect(mapStateToProps, {\n  getTitlesFromApi: getTitlesFromApi,\n  addVote: addVote\n});\nexport default connectToReduxStore(PostList);","map":{"version":3,"sources":["/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/src/Containers/PostList.js"],"names":["React","Component","Link","connect","Card","CardTitle","CardGroup","CardSubtitle","CardBody","getTitlesFromApi","addVote","FontAwesomeIcon","faThumbsUp","faThumbsDown","Loader","PostList","props","vote","bind","state","loading","setState","id","direction","upVoteStyle","margin","color","cursor","downVoteStyle","cardGroup","display","justifyContent","flexWrap","padding","marginLeft","marginTop","postCard","maxWidth","minWidth","maxHeight","border","borderColor","cardBody","postCards","posts","map","post","title","description","votes","mapStateToProps","reduxState","titles","connectToReduxStore"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Card, CardTitle, CardGroup, CardSubtitle, CardBody } from 'reactstrap';\nimport { getTitlesFromApi, addVote } from '../actionCreators';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons';\nimport Loader from 'react-loader-spinner';\n\n//Render a list of cards which contain post data, link to specific posts.\nclass PostList extends Component {\n  constructor(props) {\n    super(props);\n    this.vote = this.vote.bind(this);\n    this.state = {\n      loading: true\n    };\n  }\n  //loads title, description and votes from API\n  //(component will then get new props from mapStateToProps)\n  async componentDidMount() {\n    await this.props.getTitlesFromApi();\n    this.setState({\n      loading: false\n    });\n  }\n\n  vote(id, direction) {\n    this.props.addVote(id, direction);\n  }\n\n  render() {\n    const upVoteStyle = {\n      margin: '5px',\n      color: 'green',\n      cursor: 'pointer'\n    };\n\n    const downVoteStyle = {\n      margin: '5px',\n      color: 'red',\n      cursor: 'pointer'\n    };\n\n    const cardGroup = {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      flexWrap: 'wrap',\n      padding: '5px',\n      marginLeft: '-10px',\n      marginTop: '10px'\n    };\n\n    const postCard = {\n      maxWidth: '250px',\n      minWidth: '250px',\n      maxHeight: '400px',\n      margin: '10px',\n      border: '1px solid',\n      borderColor: '#7FDBFF'\n    };\n\n    const cardBody = {\n      margin: '5px'\n    };\n\n    if (this.state.loading) {\n      return (\n        <div className=\"title-list-container\">\n          <Loader type=\"Triangle\" color=\"#7FDBFF\" height=\"100\" width=\"100\" />\n        </div>\n      );\n    }\n\n    let postCards;\n    if (this.props.posts) {\n      let { posts } = this.props;\n      postCards = posts.map(post => {\n        return (\n          <Card key={post.id} style={postCard}>\n            <CardBody style={cardBody}>\n              <Link to={`/${post.id}`}>\n                {' '}\n                <CardTitle>{post.title}</CardTitle>\n              </Link>\n              <CardSubtitle>{post.description}</CardSubtitle>\n              <p />\n              <CardSubtitle>Votes: {post.votes}</CardSubtitle>\n              <FontAwesomeIcon\n                style={upVoteStyle}\n                onClick={() => this.vote(post.id, 'up')}\n                icon={faThumbsUp}\n              />\n              <FontAwesomeIcon\n                style={downVoteStyle}\n                onClick={() => this.vote(post.id, 'down')}\n                icon={faThumbsDown}\n              />\n            </CardBody>\n          </Card>\n        );\n      });\n    }\n\n    return <CardGroup style={cardGroup}>{postCards}</CardGroup>;\n  }\n}\n\nfunction mapStateToProps(reduxState) {\n  return {\n    posts: reduxState.titles\n  };\n}\n\nconst connectToReduxStore = connect(\n  mapStateToProps,\n  { getTitlesFromApi, addVote }\n);\n\nexport default connectToReduxStore(PostList);\n"]},"metadata":{},"sourceType":"module"}
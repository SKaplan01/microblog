{"ast":null,"code":"import _toConsumableArray from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_COMMENT, DELETE_COMMENT, LOAD_COMMENTS, ADD_POST, EDIT_POST, DELETE_POST, LOAD_POST, ADD_VOTE } from '../actionTypes';\n\nfunction postsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('posts reducer ran; state & action:', state, action);\n\n  switch (action.type) {\n    //destructure posts from existing redux state and add key/value for new post\n    case ADD_POST:\n      return _objectSpread({}, state.posts, _defineProperty({}, action.post.id, action.post));\n    //destructure posts from existing redux state and overwrite post to update with new value\n\n    case EDIT_POST:\n      return _objectSpread({}, state.posts, _defineProperty({}, action.post.id, action.post));\n    //destructures post to delete and stores in \"deletedPost\"\n    //destructures all other posts as \"posts\" --> only returns \"posts\"\n\n    case DELETE_POST:\n      var deletedPost = state[action.postId],\n          posts = _objectWithoutProperties(state, [action.postId]);\n\n      return state;\n    //Loads comments from API and add to redux state\n\n    case LOAD_COMMENTS:\n      return _objectSpread({}, state, _defineProperty({}, action.postId, _objectSpread({}, state[action.postId], {\n        comments: _toConsumableArray(state[action.postId].comments)\n      })));\n\n    case ADD_COMMENT:\n      return _objectSpread({}, state, _defineProperty({}, action.postId, _objectSpread({}, state[action.postId], {\n        comments: _toConsumableArray(state[action.postId].comments).concat([//adds new comment\n        action.comment])\n      })));\n\n    case DELETE_COMMENT:\n      //destructures comment to delete and stores in \"deletedComment\"\n      //destructures all other comments as \"comments\"\n      var newComments = state[action.postId].comments.filter(function (comment) {\n        return +comment.id !== +action.commentId;\n      });\n      return _objectSpread({}, state, _defineProperty({}, action.postId, _objectSpread({}, state[action.postId], {\n        comments: newComments\n      })));\n    //Load post from backend API and add to redux state\n\n    case LOAD_POST:\n      return _objectSpread({}, state.posts, _defineProperty({}, action.post.id, action.post));\n\n    case ADD_VOTE:\n      if (state[action.postId]) {\n        return _objectSpread({}, state, _defineProperty({}, action.postId, _objectSpread({}, state[action.postId], {\n          votes: action.votes\n        })));\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport default postsReducer;","map":{"version":3,"sources":["/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/src/reducers/posts.js"],"names":["ADD_COMMENT","DELETE_COMMENT","LOAD_COMMENTS","ADD_POST","EDIT_POST","DELETE_POST","LOAD_POST","ADD_VOTE","postsReducer","state","action","console","log","type","posts","post","id","deletedPost","postId","comments","comment","newComments","filter","commentId","votes"],"mappings":";;;;AAAA,SACEA,WADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,QAJF,EAKEC,SALF,EAMEC,WANF,EAOEC,SAPF,EAQEC,QARF,QASO,gBATP;;AAWA,SAASC,YAAT,GAA0C;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDH,KAAlD,EAAyDC,MAAzD;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACE;AACA,SAAKV,QAAL;AACE,+BAAYM,KAAK,CAACK,KAAlB,sBAA0BJ,MAAM,CAACK,IAAP,CAAYC,EAAtC,EAA2CN,MAAM,CAACK,IAAlD;AAEF;;AACA,SAAKX,SAAL;AACE,+BAAYK,KAAK,CAACK,KAAlB,sBAA0BJ,MAAM,CAACK,IAAP,CAAYC,EAAtC,EAA2CN,MAAM,CAACK,IAAlD;AAEF;AACA;;AACA,SAAKV,WAAL;AAAA,UACyBY,WADzB,GACmDR,KADnD,CACSC,MAAM,CAACQ,MADhB;AAAA,UACyCJ,KADzC,4BACmDL,KADnD,GACSC,MAAM,CAACQ,MADhB;;AAEE,aAAOT,KAAP;AAEF;;AACA,SAAKP,aAAL;AACE,+BAEKO,KAFL,sBAIGC,MAAM,CAACQ,MAJV,oBAMOT,KAAK,CAACC,MAAM,CAACQ,MAAR,CANZ;AAOIC,QAAAA,QAAQ,qBAEHV,KAAK,CAACC,MAAM,CAACQ,MAAR,CAAL,CAAqBC,QAFlB;AAPZ;;AAcF,SAAKnB,WAAL;AACE,+BAEKS,KAFL,sBAIGC,MAAM,CAACQ,MAJV,oBAMOT,KAAK,CAACC,MAAM,CAACQ,MAAR,CANZ;AAOIC,QAAAA,QAAQ,qBAEHV,KAAK,CAACC,MAAM,CAACQ,MAAR,CAAL,CAAqBC,QAFlB,UAGN;AACAT,QAAAA,MAAM,CAACU,OAJD;AAPZ;;AAgBF,SAAKnB,cAAL;AACE;AACA;AAEA,UAAIoB,WAAW,GAAGZ,KAAK,CAACC,MAAM,CAACQ,MAAR,CAAL,CAAqBC,QAArB,CAA8BG,MAA9B,CAAqC,UAAAF,OAAO,EAAI;AAChE,eAAO,CAACA,OAAO,CAACJ,EAAT,KAAgB,CAACN,MAAM,CAACa,SAA/B;AACD,OAFiB,CAAlB;AAGA,+BAEKd,KAFL,sBAIGC,MAAM,CAACQ,MAJV,oBAKOT,KAAK,CAACC,MAAM,CAACQ,MAAR,CALZ;AAOIC,QAAAA,QAAQ,EAAEE;AAPd;AAWF;;AACA,SAAKf,SAAL;AACE,+BAAYG,KAAK,CAACK,KAAlB,sBAA0BJ,MAAM,CAACK,IAAP,CAAYC,EAAtC,EAA2CN,MAAM,CAACK,IAAlD;;AAEF,SAAKR,QAAL;AACE,UAAIE,KAAK,CAACC,MAAM,CAACQ,MAAR,CAAT,EAA0B;AACxB,iCACKT,KADL,sBAEGC,MAAM,CAACQ,MAFV,oBAEwBT,KAAK,CAACC,MAAM,CAACQ,MAAR,CAF7B;AAE8CM,UAAAA,KAAK,EAAEd,MAAM,CAACc;AAF5D;AAID;;AACD,aAAOf,KAAP;;AAEF;AACE,aAAOA,KAAP;AAhFJ;AAkFD;;AAED,eAAeD,YAAf","sourcesContent":["import {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  LOAD_COMMENTS,\n  ADD_POST,\n  EDIT_POST,\n  DELETE_POST,\n  LOAD_POST,\n  ADD_VOTE\n} from '../actionTypes';\n\nfunction postsReducer(state = {}, action) {\n  console.log('posts reducer ran; state & action:', state, action);\n\n  switch (action.type) {\n    //destructure posts from existing redux state and add key/value for new post\n    case ADD_POST:\n      return { ...state.posts, [action.post.id]: action.post };\n\n    //destructure posts from existing redux state and overwrite post to update with new value\n    case EDIT_POST:\n      return { ...state.posts, [action.post.id]: action.post };\n\n    //destructures post to delete and stores in \"deletedPost\"\n    //destructures all other posts as \"posts\" --> only returns \"posts\"\n    case DELETE_POST:\n      let { [action.postId]: deletedPost, ...posts } = state;\n      return state;\n\n    //Loads comments from API and add to redux state\n    case LOAD_COMMENTS:\n      return {\n        //destructures all posts from redux state\n        ...state,\n        //overwrites post that is being commented on\n        [action.postId]: {\n          //destructures all other keys for this post besides comments\n          ...state[action.postId],\n          comments: [\n            //destructures all comments for this post from redux state\n            ...state[action.postId].comments\n          ]\n        }\n      };\n\n    case ADD_COMMENT:\n      return {\n        //destructures all posts from redux state\n        ...state,\n        //overwrites post that is being commented on\n        [action.postId]: {\n          //destructures all other keys for this post besides comments\n          ...state[action.postId],\n          comments: [\n            //destructures all comments for this post from redux state\n            ...state[action.postId].comments,\n            //adds new comment\n            action.comment\n          ]\n        }\n      };\n\n    case DELETE_COMMENT:\n      //destructures comment to delete and stores in \"deletedComment\"\n      //destructures all other comments as \"comments\"\n\n      let newComments = state[action.postId].comments.filter(comment => {\n        return +comment.id !== +action.commentId;\n      });\n      return {\n        //destructures all posts from redux state\n        ...state,\n        //overwrites post that is having comment deleted from it's commentList\n        [action.postId]: {\n          ...state[action.postId],\n\n          comments: newComments\n        }\n      };\n\n    //Load post from backend API and add to redux state\n    case LOAD_POST:\n      return { ...state.posts, [action.post.id]: action.post };\n\n    case ADD_VOTE:\n      if (state[action.postId]) {\n        return {\n          ...state,\n          [action.postId]: { ...state[action.postId], votes: action.votes }\n        };\n      }\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport default postsReducer;\n"]},"metadata":{},"sourceType":"module"}
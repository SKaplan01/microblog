{"ast":null,"code":"import _classCallCheck from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sherlock/Desktop/react_microblog/microblog/src/Components/App.js\";\nimport React, { Component } from 'react';\nimport Routes from './Routes';\nimport Header from './Header'; // import './App.css';\n\nimport uuid from 'uuid/v4'; //App component holds state => array of posts which are objects\n//App renders routes and header components\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // addComment(comment, postId) {\n    //   //finds post in app state\n    //   let index = this.state.posts.findIndex(p => p.id === postId);\n    //   //copies post object with comment inserted into comments array\n    //   let postWithComment = {\n    //     ...this.state.posts[index],\n    //     comments: [...this.state.posts[index].comments, comment]\n    //   };\n    //   //sets state with updated copy of post that includes comment\n    //   this.setState(st => ({\n    //     posts: [\n    //       ...st.posts.slice(0, index),\n    //       postWithComment,\n    //       ...st.posts.slice(index + 1, st.posts.length)\n    //     ]\n    //   }));\n    // }\n    // deleteComment(commentId, postId) {\n    //   //finds post in app state\n    //   let postIndex = this.state.posts.findIndex(p => p.id === postId);\n    //   //removes comment with matching id from list\n    //   let comments = this.state.posts[postIndex].comments;\n    //   let commentsAfterRemove = comments.filter(\n    //     comment => comment.id !== commentId\n    //   );\n    //   let updatedPost = this.state.posts[postIndex];\n    //   //sets comments for post to updated list (with comment removed)\n    //   updatedPost.comments = commentsAfterRemove;\n    //   //sets state with updated post\n    //   this.setState(st => ({\n    //     posts: [\n    //       ...st.posts.slice(0, postIndex),\n    //       updatedPost,\n    //       ...st.posts.slice(postIndex + 1, st.posts.length)\n    //     ]\n    //   }));\n    // }\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(Routes, {\n        addPost: this.addPost,\n        deletePost: this.deletePost,\n        editPost: this.editPost,\n        posts: this.state.posts,\n        addComment: this.addComment,\n        deleteComment: this.deleteComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/sherlock/Desktop/react_microblog/microblog/src/Components/App.js"],"names":["React","Component","Routes","Header","uuid","App","addPost","deletePost","editPost","state","posts","addComment","deleteComment"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,SAAjB,C,CAEA;AACA;;IACMC,G;;;;;;;;;;;;;AACJ;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAE,KAAKC,OADhB;AAEE,QAAA,UAAU,EAAE,KAAKC,UAFnB;AAGE,QAAA,QAAQ,EAAE,KAAKC,QAHjB;AAIE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC,KAJpB;AAKE,QAAA,UAAU,EAAE,KAAKC,UALnB;AAME,QAAA,aAAa,EAAE,KAAKC,aANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAaD;;;;EA3DeX,S;;AA8DlB,eAAeI,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Routes from './Routes';\nimport Header from './Header';\n// import './App.css';\nimport uuid from 'uuid/v4';\n\n//App component holds state => array of posts which are objects\n//App renders routes and header components\nclass App extends Component {\n  // addComment(comment, postId) {\n  //   //finds post in app state\n  //   let index = this.state.posts.findIndex(p => p.id === postId);\n\n  //   //copies post object with comment inserted into comments array\n  //   let postWithComment = {\n  //     ...this.state.posts[index],\n  //     comments: [...this.state.posts[index].comments, comment]\n  //   };\n\n  //   //sets state with updated copy of post that includes comment\n  //   this.setState(st => ({\n  //     posts: [\n  //       ...st.posts.slice(0, index),\n  //       postWithComment,\n  //       ...st.posts.slice(index + 1, st.posts.length)\n  //     ]\n  //   }));\n  // }\n\n  // deleteComment(commentId, postId) {\n  //   //finds post in app state\n  //   let postIndex = this.state.posts.findIndex(p => p.id === postId);\n\n  //   //removes comment with matching id from list\n  //   let comments = this.state.posts[postIndex].comments;\n  //   let commentsAfterRemove = comments.filter(\n  //     comment => comment.id !== commentId\n  //   );\n  //   let updatedPost = this.state.posts[postIndex];\n\n  //   //sets comments for post to updated list (with comment removed)\n  //   updatedPost.comments = commentsAfterRemove;\n\n  //   //sets state with updated post\n  //   this.setState(st => ({\n  //     posts: [\n  //       ...st.posts.slice(0, postIndex),\n  //       updatedPost,\n  //       ...st.posts.slice(postIndex + 1, st.posts.length)\n  //     ]\n  //   }));\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Routes\n          addPost={this.addPost}\n          deletePost={this.deletePost}\n          editPost={this.editPost}\n          posts={this.state.posts}\n          addComment={this.addComment}\n          deleteComment={this.deleteComment}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
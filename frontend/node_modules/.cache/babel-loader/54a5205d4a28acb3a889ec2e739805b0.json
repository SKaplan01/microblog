{"ast":null,"code":"import _classCallCheck from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/src/Containers/PostList.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Card, CardTitle, CardGroup, CardSubtitle, CardBody } from 'reactstrap';\nimport { getTitlesFromApi, addVote } from '../actionCreators';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons';\nimport './PostList.css'; //Render a list of cards which contain post data, link to specific posts.\n\nvar PostList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostList, _Component);\n\n  function PostList(props) {\n    var _this;\n\n    _classCallCheck(this, PostList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostList).call(this, props));\n    _this.vote = _this.vote.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //loads title, description and votes from API\n  //(component will then get new props from mapStateToProps)\n\n\n  _createClass(PostList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getTitlesFromApi();\n    }\n  }, {\n    key: \"vote\",\n    value: function vote(id, direction) {\n      this.props.addVote(id, direction);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var voteStyle = {\n        margin: '5px'\n      };\n      var cardGroup = {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        flexWrap: 'wrap',\n        padding: '5px',\n        marginLeft: '-25px',\n        marginTop: '10px'\n      };\n      var postCard = {\n        maxWidth: '250px',\n        minWidth: '250px',\n        maxHeight: '400px'\n      };\n      var cardBody = {\n        margin: '5px'\n      };\n      var postCards;\n\n      if (this.props.posts) {\n        var posts = this.props.posts;\n        postCards = posts.map(function (post) {\n          return React.createElement(Card, {\n            key: post.id,\n            style: postCard,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            style: cardBody,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, React.createElement(Link, {\n            to: \"/\".concat(post.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, ' ', React.createElement(CardTitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, post.title)), React.createElement(CardSubtitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60\n            },\n            __self: this\n          }, post.description), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61\n            },\n            __self: this\n          }), React.createElement(CardSubtitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, \"Votes: \", post.votes), React.createElement(FontAwesomeIcon, {\n            style: voteStyle,\n            onClick: function onClick() {\n              return _this2.vote(post.id, 'up');\n            },\n            icon: faThumbsUp,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }), React.createElement(FontAwesomeIcon, {\n            style: voteStyle,\n            onClick: function onClick() {\n              return _this2.vote(post.id, 'down');\n            },\n            icon: faThumbsDown,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          })));\n        });\n      }\n\n      return React.createElement(CardGroup, {\n        style: cardGroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, postCards);\n    }\n  }]);\n\n  return PostList;\n}(Component);\n\nfunction mapStateToProps(reduxState) {\n  return {\n    posts: reduxState.titles\n  };\n}\n\nvar connectToReduxStore = connect(mapStateToProps, {\n  getTitlesFromApi: getTitlesFromApi,\n  addVote: addVote\n});\nexport default connectToReduxStore(PostList);","map":{"version":3,"sources":["/Users/sherlock/Desktop/microblog-stuff/microblog/frontend/src/Containers/PostList.js"],"names":["React","Component","Link","connect","Card","CardTitle","CardGroup","CardSubtitle","CardBody","getTitlesFromApi","addVote","FontAwesomeIcon","faThumbsUp","faThumbsDown","PostList","props","vote","bind","id","direction","voteStyle","margin","cardGroup","display","justifyContent","flexWrap","padding","marginLeft","marginTop","postCard","maxWidth","minWidth","maxHeight","cardBody","postCards","posts","map","post","title","description","votes","mapStateToProps","reduxState","titles","connectToReduxStore"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,SAA1B,EAAqCC,YAArC,EAAmDC,QAAnD,QAAmE,YAAnE;AACA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,mBAA1C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,mCAAzC;AACA,OAAO,gBAAP,C,CAEA;;IACMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AACA,UAAKC,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,uDAAZ;AAFiB;AAGlB,G,CACD;AACA;;;;;wCACoB;AAClB,WAAKF,KAAL,CAAWN,gBAAX;AACD;;;yBAEIS,E,EAAIC,S,EAAW;AAClB,WAAKJ,KAAL,CAAWL,OAAX,CAAmBQ,EAAnB,EAAuBC,SAAvB;AACD;;;6BAEQ;AAAA;;AACP,UAAMC,SAAS,GAAG;AAChBC,QAAAA,MAAM,EAAE;AADQ,OAAlB;AAIA,UAAMC,SAAS,GAAG;AAChBC,QAAAA,OAAO,EAAE,MADO;AAEhBC,QAAAA,cAAc,EAAE,YAFA;AAGhBC,QAAAA,QAAQ,EAAE,MAHM;AAIhBC,QAAAA,OAAO,EAAE,KAJO;AAKhBC,QAAAA,UAAU,EAAE,OALI;AAMhBC,QAAAA,SAAS,EAAE;AANK,OAAlB;AASA,UAAMC,QAAQ,GAAG;AACfC,QAAAA,QAAQ,EAAE,OADK;AAEfC,QAAAA,QAAQ,EAAE,OAFK;AAGfC,QAAAA,SAAS,EAAE;AAHI,OAAjB;AAMA,UAAMC,QAAQ,GAAG;AACfZ,QAAAA,MAAM,EAAE;AADO,OAAjB;AAGA,UAAIa,SAAJ;;AACA,UAAI,KAAKnB,KAAL,CAAWoB,KAAf,EAAsB;AAAA,YACdA,KADc,GACJ,KAAKpB,KADD,CACdoB,KADc;AAEpBD,QAAAA,SAAS,GAAGC,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI,EAAI;AAC5B,iBACE,oBAAC,IAAD;AAAM,YAAA,GAAG,EAAEA,IAAI,CAACnB,EAAhB;AAAoB,YAAA,KAAK,EAAEW,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,QAAD;AAAU,YAAA,KAAK,EAAEI,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AAAM,YAAA,EAAE,aAAMI,IAAI,CAACnB,EAAX,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,GADH,EAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAYmB,IAAI,CAACC,KAAjB,CAFF,CADF,EAKE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAeD,IAAI,CAACE,WAApB,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,EAOE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAsBF,IAAI,CAACG,KAA3B,CAPF,EAQE,oBAAC,eAAD;AACE,YAAA,KAAK,EAAEpB,SADT;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAI,CAACJ,IAAL,CAAUqB,IAAI,CAACnB,EAAf,EAAmB,IAAnB,CAAN;AAAA,aAFX;AAGE,YAAA,IAAI,EAAEN,UAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,EAaE,oBAAC,eAAD;AACE,YAAA,KAAK,EAAEQ,SADT;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAI,CAACJ,IAAL,CAAUqB,IAAI,CAACnB,EAAf,EAAmB,MAAnB,CAAN;AAAA,aAFX;AAGE,YAAA,IAAI,EAAEL,YAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,CADF,CADF;AAuBD,SAxBW,CAAZ;AAyBD;;AAED,aAAO,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAES,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BY,SAA9B,CAAP;AACD;;;;EArEoBjC,S;;AAwEvB,SAASwC,eAAT,CAAyBC,UAAzB,EAAqC;AACnC,SAAO;AACLP,IAAAA,KAAK,EAAEO,UAAU,CAACC;AADb,GAAP;AAGD;;AAED,IAAMC,mBAAmB,GAAGzC,OAAO,CACjCsC,eADiC,EAEjC;AAAEhC,EAAAA,gBAAgB,EAAhBA,gBAAF;AAAoBC,EAAAA,OAAO,EAAPA;AAApB,CAFiC,CAAnC;AAKA,eAAekC,mBAAmB,CAAC9B,QAAD,CAAlC","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Card, CardTitle, CardGroup, CardSubtitle, CardBody } from 'reactstrap';\nimport { getTitlesFromApi, addVote } from '../actionCreators';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons';\nimport './PostList.css';\n\n//Render a list of cards which contain post data, link to specific posts.\nclass PostList extends Component {\n  constructor(props) {\n    super(props);\n    this.vote = this.vote.bind(this);\n  }\n  //loads title, description and votes from API\n  //(component will then get new props from mapStateToProps)\n  componentDidMount() {\n    this.props.getTitlesFromApi();\n  }\n\n  vote(id, direction) {\n    this.props.addVote(id, direction);\n  }\n\n  render() {\n    const voteStyle = {\n      margin: '5px'\n    };\n\n    const cardGroup = {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      flexWrap: 'wrap',\n      padding: '5px',\n      marginLeft: '-25px',\n      marginTop: '10px'\n    };\n\n    const postCard = {\n      maxWidth: '250px',\n      minWidth: '250px',\n      maxHeight: '400px'\n    };\n\n    const cardBody = {\n      margin: '5px'\n    };\n    let postCards;\n    if (this.props.posts) {\n      let { posts } = this.props;\n      postCards = posts.map(post => {\n        return (\n          <Card key={post.id} style={postCard}>\n            <CardBody style={cardBody}>\n              <Link to={`/${post.id}`}>\n                {' '}\n                <CardTitle>{post.title}</CardTitle>\n              </Link>\n              <CardSubtitle>{post.description}</CardSubtitle>\n              <p />\n              <CardSubtitle>Votes: {post.votes}</CardSubtitle>\n              <FontAwesomeIcon\n                style={voteStyle}\n                onClick={() => this.vote(post.id, 'up')}\n                icon={faThumbsUp}\n              />\n              <FontAwesomeIcon\n                style={voteStyle}\n                onClick={() => this.vote(post.id, 'down')}\n                icon={faThumbsDown}\n              />\n            </CardBody>\n          </Card>\n        );\n      });\n    }\n\n    return <CardGroup style={cardGroup}>{postCards}</CardGroup>;\n  }\n}\n\nfunction mapStateToProps(reduxState) {\n  return {\n    posts: reduxState.titles\n  };\n}\n\nconst connectToReduxStore = connect(\n  mapStateToProps,\n  { getTitlesFromApi, addVote }\n);\n\nexport default connectToReduxStore(PostList);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sherlock/Desktop/react_microblog/microblog/src/Components/App.js\";\nimport React, { Component } from 'react';\nimport Routes from './Routes';\nimport Header from './Header'; // import './App.css';\n\nimport uuid from 'uuid/v4'; //App component holds state => array of posts which are objects\n//App renders routes and header components\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      posts: []\n    };\n    _this.addPost = _this.addPost.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.editPost = _this.editPost.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.deletePost = _this.deletePost.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addComment = _this.addComment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.deleteComment = _this.deleteComment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //Add post and set state\n\n\n  _createClass(App, [{\n    key: \"addPost\",\n    value: function addPost(post) {\n      post.id = uuid();\n      post.comments = [];\n      this.setState(function (st) {\n        return {\n          posts: _toConsumableArray(st.posts).concat([post])\n        };\n      });\n    } //Remove post from state\n\n  }, {\n    key: \"deletePost\",\n    value: function deletePost(id) {\n      var newPosts = this.state.posts.filter(function (post) {\n        return post.id !== id;\n      });\n      this.setState(function (st) {\n        return {\n          posts: newPosts\n        };\n      });\n    } //Update state with new, edited post\n\n  }, {\n    key: \"editPost\",\n    value: function editPost(post) {\n      var index = this.state.posts.findIndex(function (p) {\n        return p.id === post.id;\n      });\n      this.setState(function (st) {\n        return {\n          posts: _toConsumableArray(st.posts.slice(0, index)).concat([post], _toConsumableArray(st.posts.slice(index + 1, st.posts.length)))\n        };\n      });\n    }\n  }, {\n    key: \"addComment\",\n    value: function addComment(comment, postId) {\n      //finds post in app state\n      var index = this.state.posts.findIndex(function (p) {\n        return p.id === postId;\n      }); //copies post object with comment inserted into comments array\n\n      var postWithComment = _objectSpread({}, this.state.posts[index], {\n        comments: _toConsumableArray(this.state.posts[index].comments).concat([comment])\n      }); //sets state with updated copy of post that includes comment\n\n\n      this.setState(function (st) {\n        return {\n          posts: _toConsumableArray(st.posts.slice(0, index)).concat([postWithComment], _toConsumableArray(st.posts.slice(index + 1, st.posts.length)))\n        };\n      });\n    }\n  }, {\n    key: \"deleteComment\",\n    value: function deleteComment(commentId, postId) {\n      //finds post in app state\n      var postIndex = this.state.posts.findIndex(function (p) {\n        return p.id === postId;\n      }); //removes comment with matching id from list\n\n      var comments = this.state.posts[postIndex].comments;\n      var commentsAfterRemove = comments.filter(function (comment) {\n        return comment.id !== commentId;\n      });\n      var updatedPost = this.state.posts[postIndex]; //sets comments for post to updated list (with comment removed)\n\n      updatedPost.comments = commentsAfterRemove; //sets state with updated post\n\n      this.setState(function (st) {\n        return {\n          posts: _toConsumableArray(st.posts.slice(0, postIndex)).concat([updatedPost], _toConsumableArray(st.posts.slice(postIndex + 1, st.posts.length)))\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(Routes, {\n        addPost: this.addPost,\n        deletePost: this.deletePost,\n        editPost: this.editPost,\n        posts: this.state.posts,\n        addComment: this.addComment,\n        deleteComment: this.deleteComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/sherlock/Desktop/react_microblog/microblog/src/Components/App.js"],"names":["React","Component","Routes","Header","uuid","App","props","state","posts","addPost","bind","editPost","deletePost","addComment","deleteComment","post","id","comments","setState","st","newPosts","filter","index","findIndex","p","slice","length","comment","postId","postWithComment","commentId","postIndex","commentsAfterRemove","updatedPost"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,SAAjB,C,CAEA;AACA;;IACMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,uDAAf;AACA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcD,IAAd,uDAAhB;AACA,UAAKE,UAAL,GAAkB,MAAKA,UAAL,CAAgBF,IAAhB,uDAAlB;AACA,UAAKG,UAAL,GAAkB,MAAKA,UAAL,CAAgBH,IAAhB,uDAAlB;AACA,UAAKI,aAAL,GAAqB,MAAKA,aAAL,CAAmBJ,IAAnB,uDAArB;AAPiB;AAQlB,G,CAED;;;;;4BACQK,I,EAAM;AACZA,MAAAA,IAAI,CAACC,EAAL,GAAUZ,IAAI,EAAd;AACAW,MAAAA,IAAI,CAACE,QAAL,GAAgB,EAAhB;AACA,WAAKC,QAAL,CAAc,UAAAC,EAAE;AAAA,eAAK;AAAEX,UAAAA,KAAK,qBAAMW,EAAE,CAACX,KAAT,UAAgBO,IAAhB;AAAP,SAAL;AAAA,OAAhB;AACD,K,CACD;;;;+BACWC,E,EAAI;AACb,UAAII,QAAQ,GAAG,KAAKb,KAAL,CAAWC,KAAX,CAAiBa,MAAjB,CAAwB,UAAAN,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAL,KAAYA,EAAhB;AAAA,OAA5B,CAAf;AACA,WAAKE,QAAL,CAAc,UAAAC,EAAE;AAAA,eAAK;AAAEX,UAAAA,KAAK,EAAEY;AAAT,SAAL;AAAA,OAAhB;AACD,K,CAED;;;;6BACSL,I,EAAM;AACb,UAAIO,KAAK,GAAG,KAAKf,KAAL,CAAWC,KAAX,CAAiBe,SAAjB,CAA2B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACR,EAAF,KAASD,IAAI,CAACC,EAAlB;AAAA,OAA5B,CAAZ;AACA,WAAKE,QAAL,CAAc,UAAAC,EAAE;AAAA,eAAK;AACnBX,UAAAA,KAAK,qBACAW,EAAE,CAACX,KAAH,CAASiB,KAAT,CAAe,CAAf,EAAkBH,KAAlB,CADA,UAEHP,IAFG,sBAGAI,EAAE,CAACX,KAAH,CAASiB,KAAT,CAAeH,KAAK,GAAG,CAAvB,EAA0BH,EAAE,CAACX,KAAH,CAASkB,MAAnC,CAHA;AADc,SAAL;AAAA,OAAhB;AAOD;;;+BAEUC,O,EAASC,M,EAAQ;AAC1B;AACA,UAAIN,KAAK,GAAG,KAAKf,KAAL,CAAWC,KAAX,CAAiBe,SAAjB,CAA2B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACR,EAAF,KAASY,MAAb;AAAA,OAA5B,CAAZ,CAF0B,CAI1B;;AACA,UAAIC,eAAe,qBACd,KAAKtB,KAAL,CAAWC,KAAX,CAAiBc,KAAjB,CADc;AAEjBL,QAAAA,QAAQ,qBAAM,KAAKV,KAAL,CAAWC,KAAX,CAAiBc,KAAjB,EAAwBL,QAA9B,UAAwCU,OAAxC;AAFS,QAAnB,CAL0B,CAU1B;;;AACA,WAAKT,QAAL,CAAc,UAAAC,EAAE;AAAA,eAAK;AACnBX,UAAAA,KAAK,qBACAW,EAAE,CAACX,KAAH,CAASiB,KAAT,CAAe,CAAf,EAAkBH,KAAlB,CADA,UAEHO,eAFG,sBAGAV,EAAE,CAACX,KAAH,CAASiB,KAAT,CAAeH,KAAK,GAAG,CAAvB,EAA0BH,EAAE,CAACX,KAAH,CAASkB,MAAnC,CAHA;AADc,SAAL;AAAA,OAAhB;AAOD;;;kCAEaI,S,EAAWF,M,EAAQ;AAC/B;AACA,UAAIG,SAAS,GAAG,KAAKxB,KAAL,CAAWC,KAAX,CAAiBe,SAAjB,CAA2B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACR,EAAF,KAASY,MAAb;AAAA,OAA5B,CAAhB,CAF+B,CAI/B;;AACA,UAAIX,QAAQ,GAAG,KAAKV,KAAL,CAAWC,KAAX,CAAiBuB,SAAjB,EAA4Bd,QAA3C;AACA,UAAIe,mBAAmB,GAAGf,QAAQ,CAACI,MAAT,CACxB,UAAAM,OAAO;AAAA,eAAIA,OAAO,CAACX,EAAR,KAAec,SAAnB;AAAA,OADiB,CAA1B;AAGA,UAAIG,WAAW,GAAG,KAAK1B,KAAL,CAAWC,KAAX,CAAiBuB,SAAjB,CAAlB,CAT+B,CAW/B;;AACAE,MAAAA,WAAW,CAAChB,QAAZ,GAAuBe,mBAAvB,CAZ+B,CAc/B;;AACA,WAAKd,QAAL,CAAc,UAAAC,EAAE;AAAA,eAAK;AACnBX,UAAAA,KAAK,qBACAW,EAAE,CAACX,KAAH,CAASiB,KAAT,CAAe,CAAf,EAAkBM,SAAlB,CADA,UAEHE,WAFG,sBAGAd,EAAE,CAACX,KAAH,CAASiB,KAAT,CAAeM,SAAS,GAAG,CAA3B,EAA8BZ,EAAE,CAACX,KAAH,CAASkB,MAAvC,CAHA;AADc,SAAL;AAAA,OAAhB;AAOD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAE,KAAKjB,OADhB;AAEE,QAAA,UAAU,EAAE,KAAKG,UAFnB;AAGE,QAAA,QAAQ,EAAE,KAAKD,QAHjB;AAIE,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWC,KAJpB;AAKE,QAAA,UAAU,EAAE,KAAKK,UALnB;AAME,QAAA,aAAa,EAAE,KAAKC,aANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAaD;;;;EA7Feb,S;;AAgGlB,eAAeI,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Routes from './Routes';\nimport Header from './Header';\n// import './App.css';\nimport uuid from 'uuid/v4';\n\n//App component holds state => array of posts which are objects\n//App renders routes and header components\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { posts: [] };\n    this.addPost = this.addPost.bind(this);\n    this.editPost = this.editPost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n    this.addComment = this.addComment.bind(this);\n    this.deleteComment = this.deleteComment.bind(this);\n  }\n\n  //Add post and set state\n  addPost(post) {\n    post.id = uuid();\n    post.comments = [];\n    this.setState(st => ({ posts: [...st.posts, post] }));\n  }\n  //Remove post from state\n  deletePost(id) {\n    let newPosts = this.state.posts.filter(post => post.id !== id);\n    this.setState(st => ({ posts: newPosts }));\n  }\n\n  //Update state with new, edited post\n  editPost(post) {\n    let index = this.state.posts.findIndex(p => p.id === post.id);\n    this.setState(st => ({\n      posts: [\n        ...st.posts.slice(0, index),\n        post,\n        ...st.posts.slice(index + 1, st.posts.length)\n      ]\n    }));\n  }\n\n  addComment(comment, postId) {\n    //finds post in app state\n    let index = this.state.posts.findIndex(p => p.id === postId);\n\n    //copies post object with comment inserted into comments array\n    let postWithComment = {\n      ...this.state.posts[index],\n      comments: [...this.state.posts[index].comments, comment]\n    };\n\n    //sets state with updated copy of post that includes comment\n    this.setState(st => ({\n      posts: [\n        ...st.posts.slice(0, index),\n        postWithComment,\n        ...st.posts.slice(index + 1, st.posts.length)\n      ]\n    }));\n  }\n\n  deleteComment(commentId, postId) {\n    //finds post in app state\n    let postIndex = this.state.posts.findIndex(p => p.id === postId);\n\n    //removes comment with matching id from list\n    let comments = this.state.posts[postIndex].comments;\n    let commentsAfterRemove = comments.filter(\n      comment => comment.id !== commentId\n    );\n    let updatedPost = this.state.posts[postIndex];\n\n    //sets comments for post to updated list (with comment removed)\n    updatedPost.comments = commentsAfterRemove;\n\n    //sets state with updated post\n    this.setState(st => ({\n      posts: [\n        ...st.posts.slice(0, postIndex),\n        updatedPost,\n        ...st.posts.slice(postIndex + 1, st.posts.length)\n      ]\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Routes\n          addPost={this.addPost}\n          deletePost={this.deletePost}\n          editPost={this.editPost}\n          posts={this.state.posts}\n          addComment={this.addComment}\n          deleteComment={this.deleteComment}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
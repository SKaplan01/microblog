{"ast":null,"code":"import _objectWithoutProperties from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/sherlock/Desktop/react_microblog/microblog/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_COMMENT, DELETE_COMMENT, ADD_POST, EDIT_POST, DELETE_POST } from './actionTypes';\n\nfunction rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    posts: {}\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('reducer ran; state & action:', state, action);\n\n  switch (action.type) {\n    case ADD_POST:\n      return {\n        posts: _objectSpread({}, state.posts, _defineProperty({}, action.post.id, action.post))\n      };\n\n    case EDIT_POST:\n      return {\n        posts: _objectSpread({}, state.posts, _defineProperty({}, action.post.id, action.post))\n      };\n\n    case DELETE_POST:\n      var _state$posts = state.posts,\n          deletedPost = _state$posts[action.postId],\n          posts = _objectWithoutProperties(_state$posts, [action.postId]);\n\n      return {\n        posts: posts\n      };\n\n    case ADD_COMMENT:\n      console.log(action);\n      return {\n        posts: _objectSpread({}, state.posts, _defineProperty({}, action.postId, _objectSpread({}, state.posts[action.postId], {\n          comments: _objectSpread({}, state.posts[action.postId].comments, _defineProperty({}, action.comment.id, action.comment.text))\n        })))\n      };\n\n    case DELETE_COMMENT:\n      return {\n        posts: _objectSpread({}, state.posts, _defineProperty({}, action.postId, _objectSpread({}, state.posts[action.postId], {\n          comments: _objectSpread({}, state.posts[action.postId].comments, _defineProperty({}, action.comment.id, action.comment.text))\n        })))\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer; // deleteComment(commentId, postId) {\n//   //finds post in app state\n//   let postIndex = this.state.posts.findIndex(p => p.id === postId);\n//   //removes comment with matching id from list\n//   let comments = this.state.posts[postIndex].comments;\n//   let commentsAfterRemove = comments.filter(\n//     comment => comment.id !== commentId\n//   );\n//   let updatedPost = this.state.posts[postIndex];\n//   //sets comments for post to updated list (with comment removed)\n//   updatedPost.comments = commentsAfterRemove;\n//   //sets state with updated post\n//   this.setState(st => ({\n//     posts: [\n//       ...st.posts.slice(0, postIndex),\n//       updatedPost,\n//       ...st.posts.slice(postIndex + 1, st.posts.length)\n//     ]\n//   }));\n// }","map":{"version":3,"sources":["/Users/sherlock/Desktop/react_microblog/microblog/src/rootReducer.js"],"names":["ADD_COMMENT","DELETE_COMMENT","ADD_POST","EDIT_POST","DELETE_POST","rootReducer","state","posts","action","console","log","type","post","id","deletedPost","postId","comments","comment","text"],"mappings":";;;AAAA,SACEA,WADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,SAJF,EAKEC,WALF,QAMO,eANP;;AAQA,SAASC,WAAT,GAAoD;AAAA,MAA/BC,KAA+B,uEAAvB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAuB;AAAA,MAARC,MAAQ;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CJ,KAA5C,EAAmDE,MAAnD;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAKT,QAAL;AACE,aAAO;AAAEK,QAAAA,KAAK,oBAAOD,KAAK,CAACC,KAAb,sBAAqBC,MAAM,CAACI,IAAP,CAAYC,EAAjC,EAAsCL,MAAM,CAACI,IAA7C;AAAP,OAAP;;AAEF,SAAKT,SAAL;AACE,aAAO;AAAEI,QAAAA,KAAK,oBAAOD,KAAK,CAACC,KAAb,sBAAqBC,MAAM,CAACI,IAAP,CAAYC,EAAjC,EAAsCL,MAAM,CAACI,IAA7C;AAAP,OAAP;;AAEF,SAAKR,WAAL;AAAA,yBACmDE,KAAK,CAACC,KADzD;AAAA,UACyBO,WADzB,gBACSN,MAAM,CAACO,MADhB;AAAA,UACyCR,KADzC,2CACSC,MAAM,CAACO,MADhB;;AAEE,aAAO;AAAER,QAAAA,KAAK,EAALA;AAAF,OAAP;;AAEF,SAAKP,WAAL;AACES,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAO;AACLD,QAAAA,KAAK,oBACAD,KAAK,CAACC,KADN,sBAEFC,MAAM,CAACO,MAFL,oBAGET,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACO,MAAnB,CAHF;AAIDC,UAAAA,QAAQ,oBACHV,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACO,MAAnB,EAA2BC,QADxB,sBAELR,MAAM,CAACS,OAAP,CAAeJ,EAFV,EAEeL,MAAM,CAACS,OAAP,CAAeC,IAF9B;AAJP;AADA,OAAP;;AAaF,SAAKjB,cAAL;AACE,aAAO;AACLM,QAAAA,KAAK,oBACAD,KAAK,CAACC,KADN,sBAEFC,MAAM,CAACO,MAFL,oBAGET,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACO,MAAnB,CAHF;AAIDC,UAAAA,QAAQ,oBACHV,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACO,MAAnB,EAA2BC,QADxB,sBAELR,MAAM,CAACS,OAAP,CAAeJ,EAFV,EAEeL,MAAM,CAACS,OAAP,CAAeC,IAF9B;AAJP;AADA,OAAP;;AAaF;AACE,aAAOZ,KAAP;AAzCJ;AA2CD;;AAED,eAAeD,WAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  ADD_POST,\n  EDIT_POST,\n  DELETE_POST\n} from './actionTypes';\n\nfunction rootReducer(state = { posts: {} }, action) {\n  console.log('reducer ran; state & action:', state, action);\n\n  switch (action.type) {\n    case ADD_POST:\n      return { posts: { ...state.posts, [action.post.id]: action.post } };\n\n    case EDIT_POST:\n      return { posts: { ...state.posts, [action.post.id]: action.post } };\n\n    case DELETE_POST:\n      let { [action.postId]: deletedPost, ...posts } = state.posts;\n      return { posts };\n\n    case ADD_COMMENT:\n      console.log(action);\n      return {\n        posts: {\n          ...state.posts,\n          [action.postId]: {\n            ...state.posts[action.postId],\n            comments: {\n              ...state.posts[action.postId].comments,\n              [action.comment.id]: action.comment.text\n            }\n          }\n        }\n      };\n\n    case DELETE_COMMENT:\n      return {\n        posts: {\n          ...state.posts,\n          [action.postId]: {\n            ...state.posts[action.postId],\n            comments: {\n              ...state.posts[action.postId].comments,\n              [action.comment.id]: action.comment.text\n            }\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n\n// deleteComment(commentId, postId) {\n//   //finds post in app state\n//   let postIndex = this.state.posts.findIndex(p => p.id === postId);\n\n//   //removes comment with matching id from list\n//   let comments = this.state.posts[postIndex].comments;\n//   let commentsAfterRemove = comments.filter(\n//     comment => comment.id !== commentId\n//   );\n//   let updatedPost = this.state.posts[postIndex];\n\n//   //sets comments for post to updated list (with comment removed)\n//   updatedPost.comments = commentsAfterRemove;\n\n//   //sets state with updated post\n//   this.setState(st => ({\n//     posts: [\n//       ...st.posts.slice(0, postIndex),\n//       updatedPost,\n//       ...st.posts.slice(postIndex + 1, st.posts.length)\n//     ]\n//   }));\n// }\n"]},"metadata":{},"sourceType":"module"}
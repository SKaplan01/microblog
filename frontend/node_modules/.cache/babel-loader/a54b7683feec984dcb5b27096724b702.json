{"ast":null,"code":"import _objectWithoutProperties from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/sherlock/Desktop/react_microblog/microblog/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_COMMENT, DELETE_COMMENT, ADD_POST, EDIT_POST, DELETE_POST } from './actionTypes';\n\nfunction rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    posts: {}\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('reducer ran; state & action:', state, action);\n\n  switch (action.type) {\n    //destructure posts from existing redux state and add key/value for new post\n    case ADD_POST:\n      return {\n        posts: _objectSpread({}, state.posts, _defineProperty({}, action.post.id, action.post))\n      };\n    //destructure posts from existing redux state and overwrite post to update with new value\n\n    case EDIT_POST:\n      return {\n        posts: _objectSpread({}, state.posts, _defineProperty({}, action.post.id, action.post))\n      };\n    //destructures post to delete and stores in \"deletedPost\"\n    //destructures all other posts as \"posts\" --> only returns \"posts\"\n\n    case DELETE_POST:\n      var _state$posts = state.posts,\n          deletedPost = _state$posts[action.postId],\n          posts = _objectWithoutProperties(_state$posts, [action.postId]);\n\n      return {\n        posts: posts\n      };\n\n    case ADD_COMMENT:\n      return {\n        posts: _objectSpread({}, state.posts, _defineProperty({}, action.postId, _objectSpread({}, state.posts[action.postId], {\n          comments: _objectSpread({}, state.posts[action.postId].comments, _defineProperty({}, action.comment.id, action.comment.text))\n        })))\n      };\n\n    case DELETE_COMMENT:\n      //destructures comment to delete and stores in \"deletedComment\"\n      //destructures all other comments as \"comments\"\n      var _state$posts$action$p = state.posts[action.postId].comments,\n          deletedComment = _state$posts$action$p[action.commentId],\n          comments = _objectWithoutProperties(_state$posts$action$p, [action.commentId]);\n\n      return {\n        posts: _objectSpread({}, state.posts, _defineProperty({}, action.postId, _objectSpread({}, state.posts[action.postId], {\n          //passed the \"comments\" from line 51\n          comments: comments\n        })))\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/sherlock/Desktop/react_microblog/microblog/frontend/src/rootReducer.js"],"names":["ADD_COMMENT","DELETE_COMMENT","ADD_POST","EDIT_POST","DELETE_POST","rootReducer","state","posts","action","console","log","type","post","id","deletedPost","postId","comments","comment","text","deletedComment","commentId"],"mappings":";;;AAAA,SACEA,WADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,SAJF,EAKEC,WALF,QAMO,eANP;;AAQA,SAASC,WAAT,GAAoD;AAAA,MAA/BC,KAA+B,uEAAvB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAuB;AAAA,MAARC,MAAQ;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CJ,KAA5C,EAAmDE,MAAnD;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACE;AACA,SAAKT,QAAL;AACE,aAAO;AAAEK,QAAAA,KAAK,oBAAOD,KAAK,CAACC,KAAb,sBAAqBC,MAAM,CAACI,IAAP,CAAYC,EAAjC,EAAsCL,MAAM,CAACI,IAA7C;AAAP,OAAP;AAEF;;AACA,SAAKT,SAAL;AACE,aAAO;AAAEI,QAAAA,KAAK,oBAAOD,KAAK,CAACC,KAAb,sBAAqBC,MAAM,CAACI,IAAP,CAAYC,EAAjC,EAAsCL,MAAM,CAACI,IAA7C;AAAP,OAAP;AAEF;AACA;;AACA,SAAKR,WAAL;AAAA,yBACmDE,KAAK,CAACC,KADzD;AAAA,UACyBO,WADzB,gBACSN,MAAM,CAACO,MADhB;AAAA,UACyCR,KADzC,2CACSC,MAAM,CAACO,MADhB;;AAEE,aAAO;AAAER,QAAAA,KAAK,EAALA;AAAF,OAAP;;AAEF,SAAKP,WAAL;AACE,aAAO;AACLO,QAAAA,KAAK,oBAEAD,KAAK,CAACC,KAFN,sBAIFC,MAAM,CAACO,MAJL,oBAMET,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACO,MAAnB,CANF;AAODC,UAAAA,QAAQ,oBAEHV,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACO,MAAnB,EAA2BC,QAFxB,sBAILR,MAAM,CAACS,OAAP,CAAeJ,EAJV,EAIeL,MAAM,CAACS,OAAP,CAAeC,IAJ9B;AAPP;AADA,OAAP;;AAkBF,SAAKjB,cAAL;AACE;AACA;AAFF,kCAG4DK,KAAK,CAACC,KAAN,CACxDC,MAAM,CAACO,MADiD,EAExDC,QALJ;AAAA,UAG4BG,cAH5B,yBAGSX,MAAM,CAACY,SAHhB;AAAA,UAG+CJ,QAH/C,oDAGSR,MAAM,CAACY,SAHhB;;AAME,aAAO;AACLb,QAAAA,KAAK,oBAEAD,KAAK,CAACC,KAFN,sBAIFC,MAAM,CAACO,MAJL,oBAKET,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACO,MAAnB,CALF;AAMD;AACAC,UAAAA,QAAQ,EAARA;AAPC;AADA,OAAP;;AAaF;AACE,aAAOV,KAAP;AAtDJ;AAwDD;;AAED,eAAeD,WAAf","sourcesContent":["import {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  ADD_POST,\n  EDIT_POST,\n  DELETE_POST\n} from './actionTypes';\n\nfunction rootReducer(state = { posts: {} }, action) {\n  console.log('reducer ran; state & action:', state, action);\n\n  switch (action.type) {\n    //destructure posts from existing redux state and add key/value for new post\n    case ADD_POST:\n      return { posts: { ...state.posts, [action.post.id]: action.post } };\n\n    //destructure posts from existing redux state and overwrite post to update with new value\n    case EDIT_POST:\n      return { posts: { ...state.posts, [action.post.id]: action.post } };\n\n    //destructures post to delete and stores in \"deletedPost\"\n    //destructures all other posts as \"posts\" --> only returns \"posts\"\n    case DELETE_POST:\n      let { [action.postId]: deletedPost, ...posts } = state.posts;\n      return { posts };\n\n    case ADD_COMMENT:\n      return {\n        posts: {\n          //destructures all posts from redux state\n          ...state.posts,\n          //overwrites post that is being commented on\n          [action.postId]: {\n            //destructures all other keys for this post besides comments\n            ...state.posts[action.postId],\n            comments: {\n              //destructures all comments for this post from redux state\n              ...state.posts[action.postId].comments,\n              //adds new comment\n              [action.comment.id]: action.comment.text\n            }\n          }\n        }\n      };\n\n    case DELETE_COMMENT:\n      //destructures comment to delete and stores in \"deletedComment\"\n      //destructures all other comments as \"comments\"\n      let { [action.commentId]: deletedComment, ...comments } = state.posts[\n        action.postId\n      ].comments;\n      return {\n        posts: {\n          //destructures all posts from redux state\n          ...state.posts,\n          //overwrites post that is having comment deleted from it's commentList\n          [action.postId]: {\n            ...state.posts[action.postId],\n            //passed the \"comments\" from line 51\n            comments\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}